// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tests.proto

#ifndef PROTOBUF_tests_2eproto__INCLUDED
#define PROTOBUF_tests_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tests_2eproto();
void protobuf_AssignDesc_tests_2eproto();
void protobuf_ShutdownFile_tests_2eproto();

class EchoServerRequest;
class EchoServerResponse;
class TestMessage;

// ===================================================================

class EchoServerRequest : public ::google::protobuf::Message {
 public:
  EchoServerRequest();
  virtual ~EchoServerRequest();

  EchoServerRequest(const EchoServerRequest& from);

  inline EchoServerRequest& operator=(const EchoServerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoServerRequest& default_instance();

  void Swap(EchoServerRequest* other);

  // implements Message ----------------------------------------------

  EchoServerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoServerRequest& from);
  void MergeFrom(const EchoServerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string echo_request = 1;
  inline bool has_echo_request() const;
  inline void clear_echo_request();
  static const int kEchoRequestFieldNumber = 1;
  inline const ::std::string& echo_request() const;
  inline void set_echo_request(const ::std::string& value);
  inline void set_echo_request(const char* value);
  inline void set_echo_request(const char* value, size_t size);
  inline ::std::string* mutable_echo_request();
  inline ::std::string* release_echo_request();
  inline void set_allocated_echo_request(::std::string* echo_request);

  // @@protoc_insertion_point(class_scope:EchoServerRequest)
 private:
  inline void set_has_echo_request();
  inline void clear_has_echo_request();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* echo_request_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tests_2eproto();
  friend void protobuf_AssignDesc_tests_2eproto();
  friend void protobuf_ShutdownFile_tests_2eproto();

  void InitAsDefaultInstance();
  static EchoServerRequest* default_instance_;
};
// -------------------------------------------------------------------

class EchoServerResponse : public ::google::protobuf::Message {
 public:
  EchoServerResponse();
  virtual ~EchoServerResponse();

  EchoServerResponse(const EchoServerResponse& from);

  inline EchoServerResponse& operator=(const EchoServerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoServerResponse& default_instance();

  void Swap(EchoServerResponse* other);

  // implements Message ----------------------------------------------

  EchoServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoServerResponse& from);
  void MergeFrom(const EchoServerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string echo_response = 1;
  inline bool has_echo_response() const;
  inline void clear_echo_response();
  static const int kEchoResponseFieldNumber = 1;
  inline const ::std::string& echo_response() const;
  inline void set_echo_response(const ::std::string& value);
  inline void set_echo_response(const char* value);
  inline void set_echo_response(const char* value, size_t size);
  inline ::std::string* mutable_echo_response();
  inline ::std::string* release_echo_response();
  inline void set_allocated_echo_response(::std::string* echo_response);

  // @@protoc_insertion_point(class_scope:EchoServerResponse)
 private:
  inline void set_has_echo_response();
  inline void clear_has_echo_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* echo_response_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tests_2eproto();
  friend void protobuf_AssignDesc_tests_2eproto();
  friend void protobuf_ShutdownFile_tests_2eproto();

  void InitAsDefaultInstance();
  static EchoServerResponse* default_instance_;
};
// -------------------------------------------------------------------

class TestMessage : public ::google::protobuf::Message {
 public:
  TestMessage();
  virtual ~TestMessage();

  TestMessage(const TestMessage& from);

  inline TestMessage& operator=(const TestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestMessage& default_instance();

  void Swap(TestMessage* other);

  // implements Message ----------------------------------------------

  TestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestMessage& from);
  void MergeFrom(const TestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string message = 1;
  inline int message_size() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 1;
  inline const ::std::string& message(int index) const;
  inline ::std::string* mutable_message(int index);
  inline void set_message(int index, const ::std::string& value);
  inline void set_message(int index, const char* value);
  inline void set_message(int index, const char* value, size_t size);
  inline ::std::string* add_message();
  inline void add_message(const ::std::string& value);
  inline void add_message(const char* value);
  inline void add_message(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& message() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_message();

  // @@protoc_insertion_point(class_scope:TestMessage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> message_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tests_2eproto();
  friend void protobuf_AssignDesc_tests_2eproto();
  friend void protobuf_ShutdownFile_tests_2eproto();

  void InitAsDefaultInstance();
  static TestMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// EchoServerRequest

// required string echo_request = 1;
inline bool EchoServerRequest::has_echo_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoServerRequest::set_has_echo_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoServerRequest::clear_has_echo_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoServerRequest::clear_echo_request() {
  if (echo_request_ != &::google::protobuf::internal::kEmptyString) {
    echo_request_->clear();
  }
  clear_has_echo_request();
}
inline const ::std::string& EchoServerRequest::echo_request() const {
  return *echo_request_;
}
inline void EchoServerRequest::set_echo_request(const ::std::string& value) {
  set_has_echo_request();
  if (echo_request_ == &::google::protobuf::internal::kEmptyString) {
    echo_request_ = new ::std::string;
  }
  echo_request_->assign(value);
}
inline void EchoServerRequest::set_echo_request(const char* value) {
  set_has_echo_request();
  if (echo_request_ == &::google::protobuf::internal::kEmptyString) {
    echo_request_ = new ::std::string;
  }
  echo_request_->assign(value);
}
inline void EchoServerRequest::set_echo_request(const char* value, size_t size) {
  set_has_echo_request();
  if (echo_request_ == &::google::protobuf::internal::kEmptyString) {
    echo_request_ = new ::std::string;
  }
  echo_request_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoServerRequest::mutable_echo_request() {
  set_has_echo_request();
  if (echo_request_ == &::google::protobuf::internal::kEmptyString) {
    echo_request_ = new ::std::string;
  }
  return echo_request_;
}
inline ::std::string* EchoServerRequest::release_echo_request() {
  clear_has_echo_request();
  if (echo_request_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = echo_request_;
    echo_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EchoServerRequest::set_allocated_echo_request(::std::string* echo_request) {
  if (echo_request_ != &::google::protobuf::internal::kEmptyString) {
    delete echo_request_;
  }
  if (echo_request) {
    set_has_echo_request();
    echo_request_ = echo_request;
  } else {
    clear_has_echo_request();
    echo_request_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EchoServerResponse

// required string echo_response = 1;
inline bool EchoServerResponse::has_echo_response() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoServerResponse::set_has_echo_response() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoServerResponse::clear_has_echo_response() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoServerResponse::clear_echo_response() {
  if (echo_response_ != &::google::protobuf::internal::kEmptyString) {
    echo_response_->clear();
  }
  clear_has_echo_response();
}
inline const ::std::string& EchoServerResponse::echo_response() const {
  return *echo_response_;
}
inline void EchoServerResponse::set_echo_response(const ::std::string& value) {
  set_has_echo_response();
  if (echo_response_ == &::google::protobuf::internal::kEmptyString) {
    echo_response_ = new ::std::string;
  }
  echo_response_->assign(value);
}
inline void EchoServerResponse::set_echo_response(const char* value) {
  set_has_echo_response();
  if (echo_response_ == &::google::protobuf::internal::kEmptyString) {
    echo_response_ = new ::std::string;
  }
  echo_response_->assign(value);
}
inline void EchoServerResponse::set_echo_response(const char* value, size_t size) {
  set_has_echo_response();
  if (echo_response_ == &::google::protobuf::internal::kEmptyString) {
    echo_response_ = new ::std::string;
  }
  echo_response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EchoServerResponse::mutable_echo_response() {
  set_has_echo_response();
  if (echo_response_ == &::google::protobuf::internal::kEmptyString) {
    echo_response_ = new ::std::string;
  }
  return echo_response_;
}
inline ::std::string* EchoServerResponse::release_echo_response() {
  clear_has_echo_response();
  if (echo_response_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = echo_response_;
    echo_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EchoServerResponse::set_allocated_echo_response(::std::string* echo_response) {
  if (echo_response_ != &::google::protobuf::internal::kEmptyString) {
    delete echo_response_;
  }
  if (echo_response) {
    set_has_echo_response();
    echo_response_ = echo_response;
  } else {
    clear_has_echo_response();
    echo_response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TestMessage

// repeated string message = 1;
inline int TestMessage::message_size() const {
  return message_.size();
}
inline void TestMessage::clear_message() {
  message_.Clear();
}
inline const ::std::string& TestMessage::message(int index) const {
  return message_.Get(index);
}
inline ::std::string* TestMessage::mutable_message(int index) {
  return message_.Mutable(index);
}
inline void TestMessage::set_message(int index, const ::std::string& value) {
  message_.Mutable(index)->assign(value);
}
inline void TestMessage::set_message(int index, const char* value) {
  message_.Mutable(index)->assign(value);
}
inline void TestMessage::set_message(int index, const char* value, size_t size) {
  message_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TestMessage::add_message() {
  return message_.Add();
}
inline void TestMessage::add_message(const ::std::string& value) {
  message_.Add()->assign(value);
}
inline void TestMessage::add_message(const char* value) {
  message_.Add()->assign(value);
}
inline void TestMessage::add_message(const char* value, size_t size) {
  message_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestMessage::message() const {
  return message_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestMessage::mutable_message() {
  return &message_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tests_2eproto__INCLUDED
